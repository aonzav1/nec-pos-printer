# target to convert anything to bitmap 1bits and use as raw printer
#import numpy as np
from PIL import Image,ImageFont,ImageDraw
#import io

'''
pixel_size = 416*270
bytes_pixel = (int) (pixel_size /8)

img = Image.new ("RGB",size=[416,27],color = (255,255,255))
draw = ImageDraw.Draw(img)

font = ImageFont.truetype("mitr.ttf",30)
text = "ABCDEFGกขคงจฉ"


draw.text((0,-12),text,font=font,align="left",fill=(0,0,0,255) )
bit_im = img.convert("1")
list_of_pixels = list(bit_im.getdata())

for i in list_of_pixels :
	if (i != 0x00) and (i!= 0xFF):
		print ("FOUND SOMETHING %d"%(i))


pixel_array = bytearray(list_of_pixels)
to_save = ""
for i in range (0,27):
	pixel_str = ''.join(format(x, '02x') for x in pixel_array[i:416*(i-1)])
	to_save = to_save + pixel_str + "\n"

pixel_file = open ("pixel.txt","w")
pixel_file.write(to_save)
pixel_file.close()


print ("LIST OF PIXELS %d" % len(list_of_pixels))
print(len(list_of_pixels))

img2 = Image.new("1",size=[416,27])
img2.putdata(list_of_pixels)
img2.show()
'''


#printer_pixel_file = open("printer_pixel.txt","r")
printer_pixel_file = open("AAAA_PLUS_A.bytes","r")
list_printer_bytes = []

for pixel_line in printer_pixel_file:
  lines = pixel_line.split(",")
  for x in lines :
  	list_printer_bytes.append (int(str(x),16))
printer_pixel_file.close()

printer_bytes = len(list_printer_bytes)
printer_pixels = printer_bytes * 8

printer_bits_string = ""
for i in range(0,printer_bytes) : # PRINTER_BYTES :
	tmp = format(list_printer_bytes[i], '08b')
	printer_bits_string = printer_bits_string + tmp


list_printer_bits = []

print (len(list_printer_bits))
for c in printer_bits_string :
	if (c == '1') :
		list_printer_bits.append(255)
	else :
		list_printer_bits.append(0)


to_save = ""
for i in range (0,27):
	pixel_str = ''.join(format(x, '02x') for x in list_printer_bits[i:416*(i-1)])
	to_save = to_save + pixel_str + "\n"

pixel_file = open ("AAAA_PLUS_A.txt","w")
pixel_file.write(to_save)
pixel_file.close()

img3 = Image.new("1",size=[416,27])
img3.putdata(list_printer_bits)
img3.show()

''' - Multiple Lines comment.



PRINTER_BYTES = bytearray([0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0xfc,0x0f,0xc0,0xfc,0x0f,0xc0,0xfc,0x0f,0xc0,0xfc,0x0f,0xc0,0xfc,0x0f,0xfc,0x0f,0xc0,0xfc,0x0f,0xc0,0xfc,0x0f,0xc0,0xfc,0x0f,0xc0,0xfc,0x0f,0xc0,0x0f,0xc0,0xfc,0x0f,0xc0,0xfc,0x0f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfa,0xff,0xaf,0xfa,0xff,0xaf,0xfa,0xff,0xaf,0xfa,0xff,0xfa,0xff,0xaf,0xfa,0xff,0xaf,0xfa,0xff,0xaf,0xfa,0xff,0xaf,0xfa,0xff,0xaf,0xff,0xaf,0xfa,0xff,0xaf,0xfa,0xff,0xaf,0xfa,0xff,0xaf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf7,0x7f,0x77,0xf7,0x7f,0x77,0xf7,0x77,0xf7,0x7f,0x77,0xf7,0x7f,0x77,0xf7,0x7f,0x77,0xf7,0x7f,0x77,0xf7,0x7f,0xf7,0x7f,0x77,0xf7,0x7f,0x77,0xf7,0x7f,0x77,0xf7,0x7f,0x77,0xf7,0x7f,0x77,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf7,0x7f,0x77,0x7f,0x77,0xf7,0x7f,0x77,0xf7,0x7f,0x77,0xf7,0x7f,0x77,0xf7,0x7f,0x77,0xf7,0x77,0xf7,0x7f,0x77,0xf7,0x7f,0x77,0xf7,0x7f,0x77,0xf7,0x7f,0x77,0xf7,0x7f,0xf7,0x7f,0x77,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf7,0x7f,0x77,0xf7,0x7f,0x77,0xf7,0x7f,0x77,0xf7,0x7f,0x77,0xf7,0x7f,0x77,0x7f,0x77,0xf7,0x7f,0x77,0xf7,0x7f,0x77,0xf7,0x7f,0x77,0xf7,0x7f,0x77,0xf7,0x77,0xf7,0x7f,0x77,0xf7,0x7f,0x77,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xef,0xbe,0xfb,0xef,0xbe,0xfb,0xef,0xbe,0xfb,0xef,0xbe,0xef,0xbe,0xfb,0xef,0xbe,0xfb,0xef,0xbe,0xfb,0xef,0xbe,0xfb,0xef,0xbe,0xfb,0xbe,0xfb,0xef,0xbe,0xfb,0xef,0xbe,0xfb,0xef,0xbe,0xfb,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xef,0xbe,0xfb,0xef,0xbe,0xfb,0xef,0xfb,0xef,0xbe,0xfb,0xef,0xbe,0xfb,0xef,0xbe,0xfb,0xef,0xbe,0xfb,0xef,0xbe,0xef,0xbe,0xfb,0xef,0xbe,0xfb,0xef,0xbe,0xfb,0xef,0xbe,0xfb,0xef,0xbe,0xfb,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xef,0xbe,0xfb,0xbe,0xfb,0xef,0xbe,0xfb,0xef,0xbe,0xfb,0xef,0xbe,0xfb,0xef,0xbe,0xfb,0xef,0xfb,0xef,0xbe,0xfb,0xef,0xbe,0xfb,0xef,0xbe,0xfb,0xef,0xbe,0xfb,0xef,0xbe,0xef,0xbe,0xfb,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0x1c,0x1,0xc0,0x1c,0x1,0xc0,0x1c,0x1,0xc0,0x1c,0x1,0xc0,0x1c,0x1,0x1c,0x1,0xc0,0x1c,0x1,0xc0,0x1c,0x1,0xc0,0x1c,0x1,0xc0,0x1c,0x1,0xc0,0x1,0xc0,0x1c,0x1,0xc0,0x1c,0x1,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xdf,0xdd,0xfd,0xdf,0xdd,0xfd,0xdf,0xdd,0xfd,0xdf,0xdd,0xdf,0xdd,0xfd,0xdf,0xdd,0xfd,0xdf,0xdd,0xfd,0xdf,0xdd,0xfd,0xdf,0xdd,0xfd,0xdd,0xfd,0xdf,0xdd,0xfd,0xdf,0xdd,0xfd,0xdf,0xdd,0xfd,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xdf,0xdd,0xfd,0xdf,0xdd,0xfd,0xdf,0xfd,0xdf,0xdd,0xfd,0xdf,0xdd,0xfd,0xdf,0xdd,0xfd,0xdf,0xdd,0xfd,0xdf,0xdd,0xdf,0xdd,0xfd,0xdf,0xdd,0xfd,0xdf,0xdd,0xfd,0xdf,0xdd,0xfd,0xdf,0xdd,0xfd,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xbf,0xeb,0xfe,0xeb,0xfe,0xbf,0xeb,0xfe,0xbf,0xeb,0xfe,0xbf,0xeb,0xfe,0xbf,0xeb,0xfe,0xbf,0xfe,0xbf,0xeb,0xfe,0xbf,0xeb,0xfe,0xbf,0xeb,0xfe,0xbf,0xeb,0xfe,0xbf,0xeb,0xbf,0xeb,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0f,0x80,0xf8,0x0f,0x80,0xf8,0x0f,0x80,0xf8,0x0f,0x80,0xf8,0x0f,0x80,0xf8,0x80,0xf8,0x0f,0x80,0xf8,0x0f,0x80,0xf8,0x0f,0x80,0xf8,0x0f,0x80,0xf8,0x0f,0xf8,0x0f,0x80,0xf8,0x0f,0x80,0xf8,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff])
PRINTER_SIZE =len(PRINTER_BYTES)
print (PRINTER_SIZE)
PRINTER_BITS = [0]*PRINTER_SIZE*8
PRINTER_BITS_SIZE = len(PRINTER_BITS)

bitstring = ""
for i in range(0,PRINTER_SIZE) : # PRINTER_BYTES :
	tmp = format(PRINTER_BYTES[i], '08b')
	bitstring = bitstring + tmp
b_index = 0
for c in bitstring :
	if (c == '1') :
		PRINTER_BITS [b_index] = 255
	else :
		PRINTER_BITS [b_index] = 0
	b_index = b_index + 1

print (PRINTER_BITS[-10:])
		

#416 is bits per line
PRINTER_WIDTH = 416
PRINTER_HEIGHT = int( PRINTER_BITS_SIZE/PRINTER_WIDTH )

img3 = Image.new("1",size=[PRINTER_WIDTH,PRINTER_HEIGHT])
img3.putdata(PRINTER_BYTES)
print (len(img3.getdata()))
img3.show()

End of Comment -> ''' 